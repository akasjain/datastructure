package ds.string;import java.util.HashMap;import java.util.Map;/** * https://www.geeksforgeeks.org/length-of-the-longest-substring-without-repeating-characters/ * Substring without Repeating Characters */public class LongestDistinctCharacters {  public static void main(String[] args)  {    String str = "ABDEFGABEF";    System.out.println("The input string is " + str);    int len = longestUniqueSubstring(str);    System.out.println("The length of the longest non repeating character is " + len);  }  private static int longestUniqueSubstring(String str) {    int maxLength = 1;    int currentLength = 1;    Map<Character, Integer> map = new HashMap<>();    map.put(str.charAt(0), 0);    for (int i = 1; i < str.length(); i++) {      int prevIndex = map.containsKey(str.charAt(i)) ? map.get(str.charAt(i)) : -1;      if(prevIndex == -1 || prevIndex < i - currentLength) {        currentLength++;      } else {        if(currentLength > maxLength) {          maxLength = currentLength;        }        currentLength = i - prevIndex;      }      map.put(str.charAt(i), i);    }    if(currentLength > maxLength) {      maxLength = currentLength;    }    return maxLength;  }}